include common.bee;

struct CostumeInfo {
	IsGeneric : bool;

	costumeTypeInfoCount: byte;
    costumeTypeInfo: KeyValueInt32[costumeTypeInfoCount-1];
    
    colorInfoCount: byte;
    colorInfo: KeyValueInt32[colorInfoCount-1];
    
    avatarInfoCount: byte;
    avatarInfo: KeyValueBool[avatarInfoCount-1];
    
    avatarHideInfoCount: byte;
    if (avatarHideInfoCount > 1)
    {
       avatarHideInfo: KeyValueInt32[avatarHideInfoCount-1];
    }

    polutionInfoCount: byte;
    polutionInfo: KeyValueByte[polutionInfoCount-1];
    
    effectInfoCount: byte;
    effectInfo: KeyValueInt32[effectInfoCount-1];
    
    decorationInfoCount: byte;
    decorationInfo: KeyValueInt32[decorationInfoCount-1];
    
    decorationColorInfoCount: byte;
    decorationColorInfo: KeyValueInt32[decorationColorInfoCount-1];

    SkinTexture: intBE;
    BodyOil: intBE;
    Height: intBE;
    Bust: intBE;

    PaintingX: intBE;
    PaintingY: intBE;
    PaintingRot: intBE;
    PaintingSize: intBE;

    HideHeadCostume: bool;
    Unk11: byte;
    IsReturn: bool;

    BodyPaintX: intBE;
    BodyPaintY: intBE;
    BodyPaintRot: intBE;
    BodyPaintSize: intBE;
    BodyPaintSide: intBE;
    BodyPaintClip: intBE;
    BodyPaintMode: intBE;

    bodyShapeInfoCount: byte;
    bodyShapeInfo: KeyValueFloat[bodyShapeInfoCount-1];
    TownEffect: intBE;
}

struct PetInfo {
	AnyGeneric: byte;
}

struct CharacterSummary {
	Unk1: byte;
	CID: int64BE;
	UserID: intBE;
	CharNameLen: byte;
	CharName: char[CharNameLen - 1];
	CharacterCreationDate: intBE;
	BaseCharacter: byte;
	Level: intBE;
	CurrentExp: intBE;
	LevelUpExp: intBE;
	DisplayedTitle: intBE;
	Unk2: intBE;
	Costume: CostumeInfo;
	Unk3: intBE;
	Unk4: intBE;
	DailyMicroPlayCount: intBE;
	DailyFreePlayCount: intBE;
	QuoteLen: byte;
	Quote: char[QuoteLen - 1];
	TotalUsedAP: intBE;
	Unk5: intBE;
	GuildId: intBE;
	GuildNameLen: byte;
	GuildNam: char[GuildNameLen - 1];
	CafeType: intBE;
	IsPremium: byte;
	Unk6: byte;
	Unk7: byte;
	Unk8: byte;
	IsDeleting: bool;
	DeleteWait: intBE;
	IsShouldNameChange: bool;
	Unk9: intBE;
	TransformationClass: intBE;
	FreeMatchWinCount: intBE;
	FreeMatchLoseCount: intBE;
	PetInfos: PetInfo;
	IsEventJumping: bool;
	Unk10: byte;
	CustomTitleLen: byte;
	CustomTitle: char[CustomTitleLen - 1];
	UnusedBytes: byte[21];
	New: intBE;
}

schema {
	InstanceId: int64;
	Opcode: varint;
	Length: varint;
	IsCollection: bool;
	CharCount: byte;
	CharSummary: CharacterSummary[CharCount - 1];
	MaxFreeCharacters: intBE;
	MaxPurchasedCharCount: intBE;
	MaxPremiumChars: intBE;
	ProloguePlayed: byte;
	PresetUsedCharacterCount: intBE;
	LoginPartyStateCount: byte;
	LoginPartyState: intBE[LoginPartyStateCount - 1];

	# check end of array
	until(@eof) {
	  Check: byte;
	}
}